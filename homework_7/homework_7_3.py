# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение:
#   Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание:
#   Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
#   иначе выводить соответствующее сообщение.
# Умножение:
#    Создается общая клетка из двух. Число ячеек общей клетки определяется
#    как произведение количества ячеек этих двух клеток.
# Деление:
#   Создается общая клетка из двух.
#   Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:
    def __init__(self, num_of_cells):
        self.num_of_cells = num_of_cells

    def __add__(self, other):
        return Cell(self.num_of_cells + other.num_of_cells)

    def __sub__(self, other):
        difference = self.num_of_cells - other.num_of_cells
        return Cell(difference) if difference >= 0 else 'Subtraction cannot be performed'

    def __mul__(self, other):
        return Cell(self.num_of_cells * other.num_of_cells)

    def __truediv__(self, other):
        return Cell(self.num_of_cells // other.num_of_cells)

    def make_order(self, num_of_el):
        cells_str = ''
        for i in range(self.num_of_cells // num_of_el):
            cells_str += '*' * num_of_el + '\n'
        cells_str += '*' * (self.num_of_cells % num_of_el)
        return cells_str

    def __str__(self):
        return f'{self.num_of_cells}'


x = Cell(5)
y = Cell(6)

print(x + y)
print(x - y)
print(x * y)
print(x / y)
print((x + y).make_order(3))